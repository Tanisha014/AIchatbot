<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Assistant Chatbot</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4f46e5;
            --secondary: #7c3aed;
            --dark: #1e1b4b;
            --light: #f5f3ff;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .chat-container {
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .message {
            animation: fadeIn 0.3s ease-out;
        }
        
        .user-message {
            border-radius: 1rem 1rem 0 1rem;
        }
        
        .bot-message {
            border-radius: 1rem 1rem 1rem 0;
        }
        
        .typing-indicator span {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--primary);
            animation: bounce 1s infinite ease-in-out;
        }
        
        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
        
        .suggestion-chip {
            transition: all 0.2s ease;
        }
        
        .suggestion-chip:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body class="bg-gray-100 font-sans">
    <div class="flex flex-col items-center justify-center min-h-screen p-4">
        <!-- Chatbot Main Container -->
        <div class="chat-container bg-white rounded-xl w-full max-w-md h-[600px] flex flex-col overflow-hidden">
            <!-- Chat Header -->
            <div class="bg-indigo-600 text-white p-4 flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 rounded-full bg-indigo-500 flex items-center justify-center">
                        <i class="fas fa-robot text-white"></i>
                    </div>
                    <div>
                        <h2 class="font-bold">AI Assistant</h2>
                        <p class="text-xs opacity-80">Online</p>
                    </div>
                </div>
                <button class="p-2 rounded-full hover:bg-indigo-500 transition">
                    <i class="fas fa-ellipsis-vertical"></i>
                </button>
            </div>
            
            <!-- Messages Container -->
            <div id="messages" class="flex-1 p-4 overflow-y-auto space-y-4">
                <!-- Welcome Message -->
                <div class="message bot-message bg-indigo-50 p-4 text-gray-800 max-w-[80%]">
                    <div class="flex items-start space-x-2">
                        <div class="flex-shrink-0 w-6 h-6 rounded-full bg-indigo-500 flex items-center justify-center">
                            <i class="fas fa-robot text-white text-xs"></i>
                        </div>
                        <div>
                            <p class="font-medium">AI Assistant</p>
                            <p class="mt-1">Hello! I'm your AI assistant. How can I help you today?</p>
                            <div class="mt-3 flex flex-wrap gap-2">
                                <button onclick="sendSuggestion(this)" class="suggestion-chip bg-white text-indigo-600 px-3 py-1 rounded-full text-sm border border-indigo-200 hover:bg-indigo-100">What services do you offer?</button>
                                <button onclick="sendSuggestion(this)" class="suggestion-chip bg-white text-indigo-600 px-3 py-1 rounded-full text-sm border border-indigo-200 hover:bg-indigo-100">How can I contact support?</button>
                                <button onclick="sendSuggestion(this)" class="suggestion-chip bg-white text-indigo-600 px-3 py-1 rounded-full text-sm border border-indigo-200 hover:bg-indigo-100">Troubleshooting help</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- User Input Area -->
            <div class="border-t p-4 bg-white">
                <div class="flex items-center space-x-2">
                    <button class="p-2 rounded-full hover:bg-gray-100">
                        <i class="fas fa-paperclip text-gray-500"></i>
                    </button>
                    <input id="userInput" type="text" placeholder="Type your message..." class="flex-1 border rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                    <button onclick="sendMessage()" class="p-2 rounded-full bg-indigo-600 text-white hover:bg-indigo-700 transition">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Integration Instructions -->
        <div class="mt-8 bg-white p-6 rounded-xl shadow-md max-w-2xl w-full">
            <h2 class="text-xl font-bold text-indigo-700 mb-4">Integration Guide</h2>
            <div class="space-y-4">
                <div>
                    <h3 class="font-medium text-gray-800 mb-2">1. Backend Connection</h3>
                    <p class="text-gray-600 text-sm">Connect this UI to your backend by modifying the <code class="bg-gray-100 px-2 py-1 rounded">processMessage()</code> function in the JavaScript section.</p>
                </div>
                <div>
                    <h3 class="font-medium text-gray-800 mb-2">2. Rule-Based Responses</h3>
                    <p class="text-gray-600 text-sm">Add your rule-based responses in the <code class="bg-gray-100 px-2 py-1 rounded">handleRuleBasedResponse()</code> function.</p>
                </div>
                <div>
                    <h3 class="font-medium text-gray-800 mb-2">3. AI API Integration</h3>
                    <p class="text-gray-600 text-sm">Connect to your AI service provider (e.g., OpenAI, Dialogflow) in the <code class="bg-gray-100 px-2 py-1 rounded">generateAIResponse()</code> function.</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Store conversation history
        let conversationHistory = [
            {
                role: "assistant",
                content: "Hello! I'm your AI assistant. How can I help you today?"
            }
        ];
        
        // DOM Elements
        const messagesContainer = document.getElementById('messages');
        const userInput = document.getElementById('userInput');
        
        // Send message when Enter is pressed
        userInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // Send message function
        function sendMessage() {
            const message = userInput.value.trim();
            if (message === '') return;
            
            // Add user message to UI
            addMessage('user', message);
            userInput.value = '';
            
            // Add to conversation history
            conversationHistory.push({
                role: "user",
                content: message
            });
            
            // Simulate typing indicator
            showTypingIndicator();
            
            // Process message after a short delay (simulate thinking time)
            setTimeout(async () => {
                hideTypingIndicator();
                const response = await processMessage(message);
                addMessage('assistant', response);
                
                // Add to conversation history
                conversationHistory.push({
                    role: "assistant",
                    content: response
                });
                
                // Auto-scroll to bottom
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, 1000);
        }
        
        // Send message from suggestion chip
        function sendSuggestion(button) {
            const message = button.textContent;
            userInput.value = message;
            sendMessage();
        }
        
        // Add message to UI
        function addMessage(sender, content) {
            const messageDiv = document.createElement('div');
            
            if (sender === 'user') {
                messageDiv.className = 'message user-message ml-auto bg-indigo-600 text-white p-4 max-w-[80%]';
                messageDiv.innerHTML = `
                    <div class="flex items-end justify-end space-x-2">
                        <div>
                            <p class="text-right">${content}</p>
                        </div>
                        <div class="flex-shrink-0 w-6 h-6 rounded-full bg-indigo-300 flex items-center justify-center">
                            <i class="fas fa-user text-white text-xs"></i>
                        </div>
                    </div>
                `;
            } else {
                messageDiv.className = 'message bot-message bg-indigo-50 p-4 text-gray-800 max-w-[80%]';
                messageDiv.innerHTML = `
                    <div class="flex items-start space-x-2">
                        <div class="flex-shrink-0 w-6 h-6 rounded-full bg-indigo-500 flex items-center justify-center">
                            <i class="fas fa-robot text-white text-xs"></i>
                        </div>
                        <div>
                            <p class="font-medium">AI Assistant</p>
                            <p class="mt-1">${content}</p>
                        </div>
                    </div>
                `;
            }
            
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Show typing indicator
        function showTypingIndicator() {
            const typingDiv = document.createElement('div');
            typingDiv.id = 'typingIndicator';
            typingDiv.className = 'message bot-message bg-indigo-50 p-4 text-gray-800 max-w-[80%]';
            typingDiv.innerHTML = `
                <div class="flex items-start space-x-2">
                    <div class="flex-shrink-0 w-6 h-6 rounded-full bg-indigo-500 flex items-center justify-center">
                        <i class="fas fa-robot text-white text-xs"></i>
                    </div>
                    <div>
                        <p class="font-medium">AI Assistant</p>
                        <div class="typing-indicator flex space-x-1 mt-2">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                </div>
            `;
            
            messagesContainer.appendChild(typingDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Hide typing indicator
        function hideTypingIndicator() {
            const typingDiv = document.getElementById('typingIndicator');
            if (typingDiv) {
                typingDiv.remove();
            }
        }
        
        // Process message and generate response
        async function processMessage(message) {
            // First try rule-based responses
            const ruleBasedResponse = handleRuleBasedResponse(message);
            if (ruleBasedResponse) {
                return ruleBasedResponse;
            }
            
            // If no rule-based response, generate AI response
            const aiResponse = await generateAIResponse(message);
            return aiResponse;
        }
        
        // Rule-based responses
        function handleRuleBasedResponse(message) {
            message = message.toLowerCase();
            
            const rules = {
                'hello|hi|hey': 'Hello there! How can I assist you today?',
                'how are you': 'I\'m just a bot, but I\'m functioning perfectly! How can I help you?',
                'what can you do|what do you do': 'I can answer questions, provide information, and help with various tasks. What would you like to know?',
                'thank you|thanks': 'You\'re welcome! Is there anything else I can help with?',
                'bye|goodbye': 'Goodbye! Feel free to come back if you have more questions.',
                'help|support': 'I\'d be happy to assist! Could you tell me more about what you need help with?',
                'contact|customer service': 'Our support team is available 24/7. You can reach them at support@yourcompany.com or call +1 (555) 123-4567.',
                'services|products': 'We offer a range of premium solutions including [list your products/services]. Would you like more details on any specific offering?',
                'pricing|cost|price': 'Our pricing varies based on your needs. Could you tell me which service you\'re interested in for more accurate pricing information?',
                'hours|open|when are you open': 'We operate 24/7 online support. For specific department hours, can you specify which service you\'re inquiring about?',
                'about|company info': 'We\'re a leading provider of [your services], committed to delivering exceptional value to our customers. Would you like more specific information?',
                'troubleshoot|problem|issue': 'I\'d be happy to help resolve your issue. Could you describe the problem in more detail?',
                'faq|frequently asked questions': 'For common questions, please check our FAQ section at help.yourcompany.com/faq. Or ask me directly!'
            };
            
            // Check if message matches any rule
            for (const pattern in rules) {
                const regex = new RegExp(pattern);
                if (regex.test(message)) {
                    return rules[pattern];
                }
            }
            
            // Check for patterns with dynamic responses
            if (message.includes('name')) {
                return 'My name is AI Assistant. Nice to meet you!';
            }
            
            if (message.includes('who are you')) {
                return 'I\'m your AI assistant, here to help with any questions you might have.';
            }
            
            return null; // No rule matched
        }
        
        // Generate AI response (replace with your actual AI API call)
        async function generateAIResponse(message) {
            // In a real implementation, you would call your AI API here
            // This is a mock implementation
            
            // For demo purposes, generate different responses based on message length
            if (message.length < 10) {
                return "Could you please provide more details about your question? I want to make sure I give you the best possible answer.";
            }
            
            if (message.length > 100) {
                return "I've analyzed your detailed question. Based on my understanding, the most relevant information I can provide is: [This would be the AI-generated response in a real implementation].";
            }
            
            // Some example AI responses
            const aiResponses = [
                "Based on your question, I recommend considering these factors: [AI-generated insights]. Would you like me to elaborate on any specific point?",
                "After analyzing similar cases, I suggest: [AI-generated solution]. This approach has helped many users with similar situations.",
                "My AI analysis indicates that the best course of action would be: [AI-generated recommendation]. Would you like more details?",
                "I've processed your query through our knowledge base and found these helpful insights: [AI-generated information].",
                "The optimal solution for your scenario appears to be: [AI-generated answer]. Would you like me to walk you through the steps?"
            ];
            
            // Return a random AI response (in real implementation, this would be from your AI API)
            return aiResponses[Math.floor(Math.random() * aiResponses.length)];
        }
        
        // Example of how to connect to an AI backend:
        /*
        async function generateAIResponse(message) {
            try {
                // Replace with your actual API endpoint
                const response = await fetch('https://your-ai-api-endpoint.com/v1/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer YOUR_API_KEY'
                    },
                    body: JSON.stringify({
                        model: 'gpt-4',
                        messages: conversationHistory,
                        temperature: 0.7,
                        max_tokens: 150
                    })
                });
                
                const data = await response.json();
                return data.choices[0].message.content;
            } catch (error) {
                console.error('Error calling AI API:', error);
                return "I'm having trouble processing your request right now. Please try again later.";
            }
        }
        */
    </script>
</body>
</html>
